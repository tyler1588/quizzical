{"version":3,"sources":["components/LandingPage.js","components/Question.js","components/GamePage.js","App.js","index.js"],"names":["LandingPage","props","react_default","a","createElement","className","onClick","changePage","Question","htmlDecode","input","DOMParser","parseFromString","documentElement","textContent","title","questionID","id","answers","map","element","format","parsedElement","answer","currentPage","selected","correct","key","event","selectAnswer","GamePage","gameButton","questions","renderQuestions","question","length","gradeQuiz","playGameAgain","concat","correctAnswers","num_correct","total_questions","App","setCurrentPage","prevPage","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setQuestions","shuffleArray","incorrectArray","incorrect_answers","push","correct_answer","uuid","index","formatQuestions","objectSpread","sort","Math","random","_React$useState3","_React$useState4","playAgain","setPlayAgain","useEffect","fetch","then","res","json","data","results","output","displayPage","_React$useState5","_React$useState6","_React$useState7","_React$useState8","setCorrectAnswers","answerID","prev","forEach","src","alt","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.219929f8.chunk.js","sourcesContent":["import React from \"react\"\n\nexport default function LandingPage(props){\n    return (\n        <div>\n            <h1 className=\"title\">Quizzical</h1>\n            <p className=\"sub-title\">A fun brain game.</p>\n            <button className=\"start-btn\" onClick={props.changePage}>Start quiz</button>\n        </div>\n    )\n}","import React from 'react';\n\nexport default function Question(props) {\n  function htmlDecode(input) {\n    const parser = new DOMParser().parseFromString(input, 'text/html');\n\n    return parser.documentElement.textContent;\n  }\n  const title = htmlDecode(props.title);\n\n  const questionID = props.id;\n\n  return (\n    <div className=\"question\">\n      <h1 className=\"question-title\">{title}</h1>\n      <div className=\"answers\">\n        {props.answers.map((element) => {\n          const parsedElement = htmlDecode(element.answer);\n\n          let format;\n          if (props.currentPage === 'gamePage') {\n            if (element.selected) {\n              format = 'selected-btn';\n            } else {\n              format = 'question-btn';\n            }\n          } else {\n            if (element.correct) {\n              format = 'correct-btn';\n            } else if (element.selected && !element.correct) {\n              format = 'incorrect-btn';\n            } else {\n              format = 'question-btn';\n            }\n          }\n\n          return (\n            <button\n              key={element.id}\n              className={format}\n              onClick={(event) =>\n                props.selectAnswer(event, questionID, element.id)\n              }\n            >\n              {parsedElement}\n            </button>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport Question from './Question';\n\nexport default function GamePage(props) {\n  const questions = props.questions;\n  const selectAnswer = props.selectAnswer;\n  const currentPage = props.currentPage;\n\n  const renderQuestions = questions.map((question) => {\n    return (\n      <Question\n        key={question.id}\n        id={question.id}\n        title={question.question}\n        answers={question.answers}\n        selectAnswer={selectAnswer}\n        currentPage={currentPage}\n      />\n    );\n  });\n\n  let gameButton;\n  if (questions.length > 0) {\n    if (currentPage === 'gamePage') {\n      gameButton = (\n        <button className=\"check-btn\" onClick={props.gradeQuiz}>\n          Check Answers\n        </button>\n      );\n    } else {\n      gameButton = (\n        <button className=\"check-btn\" onClick={props.playGameAgain}>\n          Play Again\n        </button>\n      );\n    }\n  }\n\n  return (\n    <div className=\"gamePage\">\n      <div className=\"questions\">\n        {renderQuestions}\n        <div className=\"controls\">\n          {props.currentPage === 'checkPage' && (\n            <h1 className=\"score\">\n              {`You scored ${props.correctAnswers.num_correct} / ${props.correctAnswers.total_questions} correct answers.`}\n            </h1>\n          )}\n          {gameButton}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport LandingPage from './components/LandingPage';\nimport GamePage from './components/GamePage';\nimport uuid from 'react-uuid';\n\nfunction App() {\n  function changePage() {\n    setCurrentPage((prevPage) => {\n      if (prevPage === 'landingPage') {\n        return 'gamePage';\n      } else if (prevPage === 'gamePage') {\n        return 'checkPage';\n      }\n    });\n  }\n\n  //Set state variable to hold array\n  const [questions, setQuestions] = React.useState([]);\n\n  function formatQuestions(questions) {\n    return questions.map((question) => {\n      const incorrectArray = question.incorrect_answers;\n      incorrectArray.push(question.correct_answer);\n      return {\n        id: uuid(),\n        question: question.question,\n        answers: incorrectArray.map((answer, index) => {\n          return {\n            id: uuid(),\n            answer: answer,\n            correct: incorrectArray.length - 1 === index ? true : false,\n            selected: false,\n          };\n        }),\n      };\n    });\n  }\n\n  function shuffleArray(questions) {\n    const unshuffled = formatQuestions(questions);\n    const shuffled = unshuffled.map((question) => {\n      return {\n        ...question,\n        answers: question.answers.sort(() => {\n          return Math.random() - 0.5;\n        }),\n      };\n    });\n    return shuffled;\n  }\n\n  const [playAgain, setPlayAgain] = React.useState(0);\n\n  function playGameAgain() {\n    setPlayAgain((prev) => prev + 1);\n    setCurrentPage('gamePage');\n    setCorrectAnswers({\n      num_correct: 0,\n      total_questions: 0,\n    });\n  }\n\n  //Get array of questions\n  React.useEffect(() => {\n    fetch('https://opentdb.com/api.php?amount=5')\n      .then((res) => res.json())\n      .then((data) => shuffleArray(data.results))\n      .then((output) => setQuestions(output));\n  }, [playAgain]);\n\n  function selectAnswer(event, questionID, answerID) {\n    setQuestions((prev) =>\n      prev.map((question) => {\n        if (question.id === questionID) {\n          return {\n            ...question,\n            answers: question.answers.map((answer) => {\n              if (answer.id === answerID) {\n                return { ...answer, selected: !answer.selected };\n              } else {\n                return { ...answer, selected: false };\n              }\n            }),\n          };\n        } else {\n          return question;\n        }\n      })\n    );\n  }\n\n  const [currentPage, setCurrentPage] = React.useState('landingPage');\n\n  const [correctAnswers, setCorrectAnswers] = React.useState({\n    num_correct: 0,\n    total_questions: 0,\n  });\n\n  function gradeQuiz() {\n    setCorrectAnswers((prev) => {\n      return { ...prev, total_questions: questions.length };\n    });\n    questions.forEach((question) => {\n      question.answers.forEach((answer) => {\n        if (answer.correct && answer.selected) {\n          setCorrectAnswers((prev) => {\n            return {\n              ...prev,\n              num_correct: (prev.num_correct += 1),\n            };\n          });\n        }\n      });\n    });\n    changePage();\n  }\n\n  let displayPage;\n  if (currentPage === 'landingPage') {\n    displayPage = <LandingPage changePage={changePage} />;\n  } else {\n    displayPage = (\n      <GamePage\n        questions={questions}\n        selectAnswer={selectAnswer}\n        changePage={changePage}\n        currentPage={currentPage}\n        playGameAgain={playGameAgain}\n        gradeQuiz={gradeQuiz}\n        correctAnswers={correctAnswers}\n      />\n    );\n  }\n\n  return (\n    <main>\n      <img src=\"blob-a.png\" alt=\"blob-a\" className=\"blob-a\"></img>\n      {displayPage}\n      <img src=\"blob-b.png\" alt=\"blob-b\" className=\"blob-b\"></img>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}